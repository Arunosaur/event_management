name: Production Deployment

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to deploy (e.g., v1.2.3)'
        required: true
      rollback_plan:
        description: 'Rollback plan ID (leave empty for normal deployment)'
        required: false
      description:
        description: 'Deployment description'
        required: true
        default: 'Regular production deployment'

jobs:
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      artifact_url: ${{ steps.get_release.outputs.artifact_url }}
      is_rollback: ${{ steps.check_rollback.outputs.is_rollback }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Check Rollback Plan
        id: check_rollback
        run: |
          if [[ -n "${{ github.event.inputs.rollback_plan }}" ]]; then
            echo "is_rollback=true" >> $GITHUB_OUTPUT
            echo "This is a rollback deployment to release ${{ github.event.inputs.release_tag }}"
          else
            echo "is_rollback=false" >> $GITHUB_OUTPUT
            echo "This is a regular deployment of release ${{ github.event.inputs.release_tag }}"
          fi
      
      - name: Get Release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const tag = context.payload.inputs.release_tag;
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            
            if (!release || !release.data) {
              core.setFailed(`Release with tag ${tag} not found`);
              return;
            }
            
            const assetUrl = release.data.assets.find(asset => 
              asset.name.startsWith('release-artifact-') && 
              asset.name.endsWith('.zip')
            )?.browser_download_url;
            
            if (!assetUrl) {
              core.setFailed(`No release artifact found for tag ${tag}`);
              return;
            }
            
            core.setOutput('artifact_url', assetUrl);
            console.log(`Release artifact URL: ${assetUrl}`);

  request-approval:
    name: Request Deployment Approval
    needs: prepare-deployment
    runs-on: ubuntu-latest
    environment: production-approval
    steps:
      - name: Approval Details
        run: |
          echo "Release: ${{ github.event.inputs.release_tag }}"
          echo "Description: ${{ github.event.inputs.description }}"
          echo "Deployment type: ${{ needs.prepare-deployment.outputs.is_rollback == 'true' && 'ROLLBACK' || 'REGULAR' }}"

  deploy-to-production:
    name: Deploy to Production
    needs: [prepare-deployment, request-approval]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup SQLcl
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'
      
      - name: Download SQLcl
        run: |
          wget https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip
          unzip sqlcl-latest.zip
          echo "$PWD/sqlcl/bin" >> $GITHUB_PATH
      
      - name: Download Release Artifact
        run: |
          mkdir -p ./release
          cd ./release
          curl -L -o release.zip "${{ needs.prepare-deployment.outputs.artifact_url }}"
          unzip release.zip
          cd ..
      
      - name: Backup Current State
        run: |
          # Create a backup before deployment
          echo "Creating production database backup..."
          sql -S /nolog <<EOF
          connect ${{ secrets.PROD_DB_USERNAME }}/${{ secrets.PROD_DB_PASSWORD }}@${{ secrets.PROD_DB_CONNECTION_STRING }}
          project export -directory ./backup
          exit
          EOF
          
          # Save backup artifact
          zip -r production-backup-$(date +%Y%m%d%H%M%S).zip ./backup
      
      - name: Upload Backup Artifact
        uses: actions/upload-artifact@v3
        with:
          name: production-backup
          path: production-backup-*.zip
          retention-days: 30
      
      - name: Stage Changes
        run: |
          sql -S /nolog <<EOF
          connect ${{ secrets.PROD_DB_USERNAME }}/${{ secrets.PROD_DB_PASSWORD }}@${{ secrets.PROD_DB_CONNECTION_STRING }}
          project stage -source ./release
          exit
          EOF
      
      - name: Verify Changes
        id: verify
        run: |
          set +e
          sql -S /nolog <<EOF
          connect ${{ secrets.PROD_DB_USERNAME }}/${{ secrets.PROD_DB_PASSWORD }}@${{ secrets.PROD_DB_CONNECTION_STRING }}
          project verify
          exit
          EOF
          
          VERIFY_STATUS=$?
          if [ $VERIFY_STATUS -ne 0 ]; then
            echo "Verification failed, deployment halted."
            exit $VERIFY_STATUS
          fi
          echo "Verification passed, proceeding with deployment."
      
      - name: Deploy to Production
        id: deploy
        run: |
          sql -S /nolog <<EOF
          connect ${{ secrets.PROD_DB_USERNAME }}/${{ secrets.PROD_DB_PASSWORD }}@${{ secrets.PROD_DB_CONNECTION_STRING }}
          project deploy
          exit
          EOF
          
          DEPLOY_STATUS=$?
          if [ $DEPLOY_STATUS -ne 0 ]; then
            echo "Deployment failed, initiating rollback..."
            exit $DEPLOY_STATUS
          fi
          
          echo "deployment_id=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          echo "Deployment completed successfully."
      
      - name: Run Smoke Tests
        run: |
          echo "Running production smoke tests..."
          # Add your smoke test scripts here

